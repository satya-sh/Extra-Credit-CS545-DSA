3 Easy Problems - LeetCode

GitHub Repo Link: https://github.com/satya-sh/Extra-Credit-CS545-DSA/tree/main/EC7/src

Problem 1: Merge Two Binary Trees
    You are given two binary trees root1 and root2.

    Imagine that when you put one of them to cover the other,
    some nodes of the two trees are overlapped while the others are not.
    You need to merge the two trees into a new binary tree. The merge rule is
    that if two nodes overlap, then sum node values up as the new value of the
    merged node. Otherwise, the NOT null node will be used as the node of the new tree.

    Return the merged tree.

    Note: The merging process must start from the root nodes of both trees.

    LINK: https://leetcode.com/problems/merge-two-binary-trees/description/

Problem 2: Increasing Order Search Tree
    Given the root of a binary search tree, rearrange the tree in in-order so that the
    leftmost node in the tree is now the root of the tree, and every node has no left
    child and only one right child.

    LINK: https://leetcode.com/problems/increasing-order-search-tree/description/

Problem 2: Evaluate Boolean Binary Tree
    You are given the root of a full binary tree with the following properties:

    Leaf nodes have either the value 0 or 1, where 0 represents False and 1 represents True.
    Non-leaf nodes have either the value 2 or 3, where 2 represents the boolean OR and 3
    represents the boolean AND.
    The evaluation of a node is as follows:

    If the node is a leaf node, the evaluation is the value of the node, i.e. True or False.
    Otherwise, evaluate the node's two children and apply the boolean operation of
    its value with the children's evaluations.
    Return the boolean result of evaluating the root node.

    A full binary tree is a binary tree where each node has either 0 or 2 children.

    A leaf node is a node that has zero children.

    LINK: https://leetcode.com/problems/evaluate-boolean-binary-tree/description/